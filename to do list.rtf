{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red92\green38\blue153;\red63\green110\blue116;\red170\green13\blue145;
\red38\green71\blue75;\red46\green13\blue110;\red28\green0\blue207;\red196\green26\blue22;}
\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf0 This file is just a place to store ideas for things to do.    Many of them are in the code, embedded in random places.  \
\
\ul User Preferences\
\
\ulnone the highlightColor (in the EXTView class) should be set as a global user preference.\
highlightLineWidth, in the EXTView class should be a user preference.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ul \ulc0 DocumentSettings panel\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ulnone \
In the documentSettings panel, make the artBoard dimension be in grid coordinates, not the EXTView's bounds coordinates.   How crazy is it to make the artBoard snap to the middle of the squares?\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ul Tool Class\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ulnone make a general EXTTool class having the common functionality,  so that the view only imports the one header file.   Subclasses like EXTTerm and EXTDifferential will override the methods.   Right now those methods are\
\
\pard\tx560\pardeftab560\pardirnatural

\f1\b\fs24 \cf0 \CocoaLigature0 + (\cf2 NSBezierPath\cf0  *) makeHighlightPathAtPoint:(\cf2 NSPoint\cf0 )point onGrid:(\cf3 EXTGrid\cf0  *)theGrid onPage:(\cf2 NSInteger\cf0 )\cf3 page\cf0 ;\
+ (\cf2 void\cf0 ) addSelfToPage:(\cf2 EXTPage *\cf0 )extPage atPoint:(\cf3 NSPoint\cf0 )point;\
\
(
\f0\b0\fs28 \CocoaLigature1 changed it to
\f1\b\fs24 \CocoaLigature0 \
\
\pard\tx560\pardeftab560\pardirnatural

\f2\b0\fs22 \cf0 + (\cf4 void\cf0 )addSelfToSequence:(\cf2 NSMutableArray\cf0  *)pageSequence onPage:(\cf3 EXTPage\cf0  *)extPage atPoint:(\cf2 NSPoint\cf0 )point\
\
)
\f1\b\fs24 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b0\fs28 \cf0 \CocoaLigature1 The default of this might be an NSBezierPath with NSZeroRect.    We also need to know about switching on/off the tracking rectangle.  \
\
We ought to make the highlightPath with a reference point at the origin, and in a coordinate system in which the grid rectangles are 1 unit.   That way the tool class doesn't need to import the grid class.   The EXTView class will then scale and translate.\
\
I think we need a way of erasing a range of groups, and of adding a range of groups.   Perhaps by selecting a range of cells with a marquee selection tool, and either hitting "erase" or "add."    Have to think of the right abstraction for the tool.   So far the tools have to do with\
\
* inspecting the groups\
* adding a free group on one generator at a point (if you're on the nth page it gets added all the way back to page 1).\
* adding a differential\
\
and perhaps\
\
* selecting a term or group of terms\
* performing an action on the selection (deleting, adding generators, perhaps ispecting the groups and differentials).\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ul EXTView Class\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ulnone We keep insetting the rect by -2 before \uc0\u65279 \u65279  the highlightPath.   Probably we should keep the lineWidth as a preference, and use -highlightLineWidth/2 as the inset.  \
\
Need to toggle the highlighting.   Perhaps that is where we switch the tracking rectangle on and off.   \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ul EXTArtBoard Class\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ulnone \
In the documentSettings panel, make the artBoard dimension be in grid coordinates, not the EXTView's bounds coordinates.   How crazy is it to make the artBoard snap to the middle of the squares?\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ul EXTPage Class\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ulnone I fixed the initializers a little.   Need to make this class independent of the grid (it nearly is).\
\
More on the design.   The page class contains an array (a mutable dictionary) of "terms" and one of "differentials."   It knows which page number it is, though since that is supposed to coincide with it's position on the pages array, I'm thinking we should get that number from the ArrayControler's selector, somehow.   The objects in the grid should actually stay the same if they are not affected by a differential.   So if all the d's are zero, the next page is a copy of the current page.   Any objects not affected by differentials are still referenced on the next page.   The page class should also keep a list of "dirty" differentials.   When the next page is computed, we run through the list of dirty differentials and do something.   What we do is replace the target by the cokernel, and the source by the kernel.   Then we look at all the differentials (there is at most one) on each page whose source is the target, and we replace the source by the cokernel.   Same for the kernel.   \
\
But how do we keep all these objects the "same?"  One way is to just move forward through the pages, replacing the term at our (p,q) position with the same instance of the quotient.   I guess we do that until we meet a differential whose source or target is at the (p,q) term.   If we're replacing by a cokernel, and we meet a differential whose image is in position (p,q) we stop replacing, since the differential in question does it for us.   If we meet a differential whose kernel is in (p,q) we mod out our subgrup from it, and continue on to subsequent terms.   The other two possibilites involve looking at the source of a differential   We cut subsequent groups down to the kernel, until we meet another differential coming out.   It takes over.   If we see a differential coming in, we have to cut down to a new kernel.   Yow.  \
\
Maybe we don't have an array of pages, but rather an array of terms.   Each term knows its history in the spectral sequence (a filtration by kernels and images).    A "page" then merely holds on to an array of differentials.     This has the advantage that a term can display itself on a given page in a way that reflects its history.    It also gives an easy test to see if a term has the property of being "zero."    Let's call these option I and option II.   \
\
option I:   a page holds an array of terms and of differentials, though the terms on on page reference terms on another.\
option II:  a "term" is a filtered object, so each page just has a list of differentials.   Or the "page" is just an instruction for extracting a picture.  \
\
I think I need to try and code it both ways and see which goes the best.   Since we're closest to I, maybe that's what to do first.   Option I could be arranged to keep track of the filtered object as well.\
\
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ul EXTWindowController\ulnone \
\
Need to break out a separate window controller.   The document class is getting a little bloated, I think.   In Sketch, the window controller binds several of the view's ivars to things in the arraycontroller (the array itself, and the selection indices) and to the grid.   In our case the grid is part of the document, so we'll go for a different architecture.    See Sketch's 
\f1\b\fs24 \CocoaLigature0 - (
\f2\b0\fs28 \cf4 void
\f1\b\fs24 \cf0 )windowDidLoad\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\b0\fs28 \cf0 \CocoaLigature1 method in SKTWindowController.m.   \
\
Honestly, though, I'm not sure what's better about Sketch's way of doing it.   We're just calling the setter methods to set the View's ivars to the ones in the document.   Doesn't that do the same thing?\
\
Actually, in Sketch the "graphics" variable in the view is bound to the graphics variable in the windowController, but the getter in the view for the "graphics" variable is defined to just query the windowController.   That seems really weird to me, and seems like it would cause an infinite loop.   \
\
One possible rationale for doing this is the management of retain counts.   \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\i \cf0 Let's see, in the SKTGraphicView code, in -createGraphicsOfClass:withEvent: one needs to add a graphic to the mutableGraphics array.   Instead of just calling [mutableGraphics insertObject: atIndex:] they do 
\f3\fs22 \CocoaLigature0  \

\f2\i0  \
\cf2 NSMutableArray\cf0  *mutableGraphics = [\cf4 self\cf0  \cf5 mutableGraphics\cf0 ];
\f0\fs28 \CocoaLigature1 \
\pard\tx560\pardeftab560\pardirnatural

\f2\fs22 \cf0 \CocoaLigature0 [mutableGraphics \cf6 insertObject\cf0 :\cf3 _creatingGraphic\cf0  \cf6 atIndex\cf0 :\cf7 0\cf0 ];\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs28 \cf0 \CocoaLigature1 I guess this avoids the loop.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \ul NSArrayController (in EXTDocument.xib)\ulnone \
\
The "pageInView" variable in the EXTView class should probably be bound to the NSArrayController's selection, or some property thereof. \
\
\ul Undo\ulnone \
\
Come to grips with the UndoManager and stuff.\
\
\ul EXTToolPalette\ulnone \
\
The out of the box toolbar stuff looks pretty cool.   I just couldn't work out how to configure it.   But here in Xcode it replaces the tool palette, or at least supplements it.   It is window by window, rather than a single instance, though.\
\
\ul Notes:\ulnone \
\
In the Sketch app, keypaths are all set up like this:\
\
\pard\tx560\pardeftab560\pardirnatural

\f2 \cf4 \CocoaLigature0 extern
\f1\b\fs24 \cf0  \cf2 NSString\cf0  *\cf3 SKTGraphicViewGridBindingName\cf0 ;
\f0\b0\fs28 \CocoaLigature1    (in the header file, before the @interface line)\
\pard\tx560\pardeftab560\pardirnatural

\f1\b\fs24 \cf0 \CocoaLigature0 NSString *SKTGraphicViewGraphicsBindingName = 
\f2\b0\fs28 \cf8 @"graphics"
\f1\b\fs24 \cf0 ;  
\f0\b0\fs28 \CocoaLigature1 (in the implementation file before the @implementation line)\
\
This makes it a little bit of a pain to read, but it does get Xcode's autocompletion in the game, so you don't make typos referring to these things. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf0 \
}